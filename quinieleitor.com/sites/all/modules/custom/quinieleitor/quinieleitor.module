<?php

define('MATCHES_PER_SLIP', 10);

/**
 * Implements hook_menu()
 */
function quinieleitor_menu() {
  $items = array();
  $items['admin/quinieleitor/add'] = array(
    'title' => 'Add a betting slip',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quinieleitor_add_betting_slip_form'),
    'access arguments' => array('add betting slips'),
    'file' => 'quinieleitor.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/quinieleitor/resolve'] = array(
    'title' => 'Resolve a betting slip',
    'page callback' => 'quinieleitor_resolve_betting_slip_page',
    'access arguments' => array('resolve betting slips'),
    'file' => 'quinieleitor.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['bet'] = array(
    'title' => 'Bet',
    'page callback' => 'quinieleitor_bet_page',
    'access arguments' => array('bet'),
    'file' => 'quinieleitor.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['hall-of-fame'] = array(
    'title' => 'Hall of Fame',
    'page callback' => 'quinieleitor_hall_of_fame_page',
    'access arguments' => array('bet'),
    'file' => 'quinieleitor.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_perm()
 */
function quinieleitor_perm() {
  return array('add betting slips', 'resolve betting slips', 'bet');
}


function quinieleitor_load_current_slip() {
  $results = db_query('SELECT * FROM {betting_slips} WHERE date>NOW() AND closed=0 ORDER BY date ASC LIMIT 1');
  $slip = db_fetch_object($results);
  if ($slip) {
    $slip->matches = quinieleitor_load_slip_matches($slip->id);
  }

  return $slip;
}


function quinieleitor_load_slip($slip_id) {
  $results = db_query('SELECT * FROM {betting_slips} WHERE id=%d', $slip_id);
  $slip = db_fetch_object($results);
  if ($slip) {
    $slip->matches = quinieleitor_load_slip_matches($slip->id);
  }

  return $slip;
}


function quinieleitor_load_better_slip($uid, $slip_id) {
  $results = db_query('SELECT b.* FROM {bets} b JOIN {matches} m ON b.match_id=m.id WHERE b.user_id=%d AND m.slip_id=%d ORDER BY m.id ASC', $uid, $slip_id);
  $better_slip = new stdClass();
  $better_slip->slip_id = $slip_id;
  $better_slip->matches = array();
  while ($bet = db_fetch_object($results)) {
    $better_slip->matches[$bet->match_id] = $bet;
  }

  return $better_slip;
}


function quinieleitor_load_betting_slips() {
  $slips = array();
  $results = db_query('SELECT * FROM {betting_slips} ORDER BY date ASC');
  while ($slip = db_fetch_object($results)) {
    $slip->matches = quinieleitor_load_slip_matches($slip->id);
    $slips[] = $slip;
  }
  return $slips;
}


function quinieleitor_load_slip_matches($slip_id) {
  $matches = array();
  $results = db_query('SELECT * FROM {matches} WHERE slip_id=%d ORDER BY id ASC', $slip_id);
  while ($match = db_fetch_object($results)) {
    $matches[$match->id] = $match;

  }

  return $matches;
}

function quinieleitor_save_betting_slip($betting_slip) {
  drupal_write_record('betting_slips', $betting_slip);
  foreach ($betting_slip->matches as $match) {
    $match->slip_id = $betting_slip->id;
    drupal_write_record('matches', $match);
  }
}


function quinieleitor_save_bet($bet) {
  foreach ($bet->matches as $match_bet) {
    drupal_write_record('bets', $match_bet);
  }
}


function quinieleitor_resolve_betting_slip($slip_id, $matches) {
  foreach ($matches as $match_id => $result) {
    db_query('UPDATE {matches} set result="%s" WHERE id=%d', $result, $match_id);
  }
  db_query('UPDATE {betting_slips} set closed=1 WHERE id=%d', $slip_id);

  module_invoke_all('betting_slip_resolved', $slip_id);
}


/**
 * Specification of betting_slip_resolved.
 */
function hook_betting_slip_resolved($slip_id)
{
}


/**
 * Implements hook_betting_slip_resolved.
 */
function quinieleitor_betting_slip_resolved($slip_id) {
  $better_slips = quinieleitor_load_all_bets_for_slip($slip_id);

  quinieleitor_update_all_better_points($slip_id, $better_slips);
}


function quinieleitor_load_all_bets_for_slip($slip_id) {
  $better_slips = array();
  $results = db_query('SELECT DISTINCT(b.user_id) FROM {bets} b JOIN {matches} m WHERE b.match_id = m.id AND m.slip_id = %d', $slip_id);
  while ($row = db_fetch_object($results)) {
    $better_slips[$row->user_id] = quinieleitor_load_better_slip($row->user_id, $slip_id);
  }

  return $better_slips;
}


function quinieleitor_update_all_better_points($slip_id, $better_slips) {
  $result_slip = quinieleitor_load_slip($slip_id);
  quinieleitor_calculate_prizes($result_slip, $better_slips, quinieleitor_get_prize_table());
  foreach ($better_slips as $uid => $better_slip) {
    quinieleitor_add_better_points($uid, $better_slip->prize);
  }
}


function quinieleitor_get_prize_table() {
  return array(
    'slip_value' => 100,
    'prizes' => array(
      10 => 0.4,
       9 => 0.2,
       8 => 0.12,
       7 => 0.08,
     ),
  );
}


function quinieleitor_add_better_points($uid, $points) {
  $current_points = quinieleitor_load_better_points($points);
  $score = new stdClass();
  $score->user_id = $uid;
  $score->points = $points + $current_points;
  drupal_write_record('better_points', $score);
}


function quinieleitor_load_better_points($uid) {
  $results = db_query('SELECT points FROM {better_points} WHERE user_id=%d', $uid);
  $row = db_fetch_object($results);

  return $row ? $row->points : 0;
}


function quinieleitor_load_hall_of_fame() {
  $results = db_query('SELECT * FROM {better_points} p JOIN {users} u ON p.user_id=u.uid ORDER BY points DESC');
  $hall_of_fame = array();
  while ($row = db_fetch_object($results)) {
    $hall_of_fame[] = $row;
  }

  return $hall_of_fame;
}


class Bet
{
    private $id;
    private $matchId;
    private $prediction;


    public function __construct($id, $match_id, $prediction)
    {
        $this->id = $id;
        $this->matchId = $match_id;
        $this->prediction = $prediction;
    }

    public function getMatchId()
    {
        return $this->matchId;
    }

    public function hits(Match $match)
    {
        return $match->getResult() == $this->prediction;
    }

}

class Match
{
    private $id;
    private $name;
    private $result;

    public function __construct($id, $name, $result = null)
    {
        $this->id = $id;
        $this->name = $name;
        $this->result = $result;
    }

    public function getId()
    {
        return $this->id;
    }

    public function getResult()
    {
        return $this->result;
    }

}

class ResultsSlip
{
    private $matches = array();

    public static function createFromLegacy($legacy_slip)
    {
        $slip = new static();
        foreach ($legacy_slip->matches as $match) {
            $slip->add(new Match($match->id, $match->name, $match->result));
        }

        return $slip;
    }

    public function add(Match $match)
    {
        $this->matches[$match->getId()] = $match;
    }


    public function betHits(Bet $bet)
    {
        return $bet->hits($this->matches[$bet->getMatchId()]);
    }
}

class BetterSlip
{
    private $bets = array();

    public static function createFromLegacy($legacy_slip)
    {
        $slip = new static();
        foreach ($legacy_slip->matches as $bet) {
            $slip->add(new Bet($bet->id, $bet->match_id, $bet->prediction));
        }

        return $slip;
    }

    public function add(Bet $bet)
    {
        $this->bets[$bet->getMatchId()] = $bet;
    }

    public function getHits(ResultsSlip $results_slip)
    {
        $hits = 0;
        foreach ($this->bets as $bet) {
            $hits += (int) $results_slip->betHits($bet);
        }

        return $hits;
    }
}

function quinieleitor_calculate_prizes($results_slip, $better_slips, $prize_table) {
  $results_slip_instance = ResultsSlip::createFromLegacy($results_slip);
  $hits_count = quinieleitor_get_hits_count($results_slip, $better_slips);
  foreach ($better_slips as $i => $better_slip) {
    $better_slip_instance = BetterSlip::createFromLegacy($better_slip);
    $player_hits = $better_slip_instance->getHits($results_slip_instance);
    $share_with_betters = isset($hits_count[$player_hits]) ? $hits_count[$player_hits] : 1;
    $better_slip->prize = quinieleitor_calculate_prize($player_hits, $prize_table, count($better_slips), $share_with_betters);
  }
}


function quinieleitor_get_hits_count($results_slip, $better_slips) {
  $hits_count = array();
  foreach ($better_slips as $i => $better_slip) {
    $player_hits = quinieleitor_get_number_of_right_guesses($results_slip, $better_slip);
    if (!isset($hits_count[$player_hits])) {
      $hits_count[$player_hits] = 0;
    }
    $hits_count[$player_hits]++;
  }

  return $hits_count;
}


function quinieleitor_get_number_of_right_guesses($results_slip, $better_slip) {
  $hits = 0;
  foreach ($better_slip->matches as $bet) {
    $hits += (int) quinieleitor_better_guessed_right_match($bet->match_id, $results_slip, $better_slip);
  }

  return $hits;
}


function quinieleitor_better_guessed_right_match($match_id, $results_slip, $better_slip) {
  $bet = $better_slip->matches[$match_id];

  return $results_slip->matches[$bet->match_id]->result == $bet->prediction;
}


function quinieleitor_calculate_prize($hits, $prize_table, $num_players, $share_with) {
  if (isset($prize_table['prizes'][$hits])) {
    return $num_players * $prize_table['slip_value'] * $prize_table['prizes'][$hits] / $share_with;
  }

  return 0;
}
