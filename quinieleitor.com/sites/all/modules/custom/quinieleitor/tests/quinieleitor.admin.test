<?php

require_once __DIR__ . '/quinieleitor_test_helper.inc';

class QuinieleitorAdminTest extends DrupalWebTestCase {

  private $admin;
  private $helper;
  private $betters = array();

  function getInfo() {
    return array(
      'name' => 'Quinieleitor admin',
      'description' => 'Functional tests for administrators',
      'group' => 'Quinieleitor'
    );
  }


  function setUp() {
    parent::setUp('quinieleitor');
    $this->admin = $this->drupalCreateUser(array('access content', 'add betting slips', 'resolve betting slips'));
    $this->betters[] = $this->drupalCreateUser(array('access content'));
    $this->betters[] = $this->drupalCreateUser(array('access content'));
    $this->helper = new QuinieleitorTestHelper;
  }


  function testAdminsCreateBettingSlips() {
    // Arrange
    $this->drupalLogin($this->admin);
    $betting_slip = array(
      'date' => '2014-08-24',
      'matches[0]' => 'SEV-VAL',
      'matches[1]' => 'ALM-ESP',
      'matches[2]' => 'CEL-GET',
      'matches[3]' => 'RMA-COR',
      'matches[4]' => 'EIB-RSO',
      'matches[5]' => 'RAY-ATM',
      'matches[6]' => 'GRA-DEP',
      'matches[7]' => 'FCB-ELC',
      'matches[8]' => 'LEV-VIL',
      'matches[9]' => 'MAL-ATH',
    );

    // Act
    $this->drupalPost('admin/quinieleitor/add', $betting_slip, 'Add');

    // Assert
    $slips = $this->helper->loadResultsSlips();
    $this->assertEqual(1, count($slips));
    $matches = array_values($slips[0]->getMatches());
    $this->assertEqual($matches[0]->getName(), 'SEV-VAL', sprintf('%s equals expected', $matches[0]->getName()));
    $this->assertEqual($matches[1]->getName(), 'ALM-ESP', sprintf('%s equals expected', $matches[1]->getName()));
    $this->assertEqual($matches[2]->getName(), 'CEL-GET', sprintf('%s equals expected', $matches[2]->getName()));
    $this->assertEqual($matches[3]->getName(), 'RMA-COR', sprintf('%s equals expected', $matches[3]->getName()));
    $this->assertEqual($matches[4]->getName(), 'EIB-RSO', sprintf('%s equals expected', $matches[4]->getName()));
    $this->assertEqual($matches[5]->getName(), 'RAY-ATM', sprintf('%s equals expected', $matches[5]->getName()));
    $this->assertEqual($matches[6]->getName(), 'GRA-DEP', sprintf('%s equals expected', $matches[6]->getName()));
    $this->assertEqual($matches[7]->getName(), 'FCB-ELC', sprintf('%s equals expected', $matches[7]->getName()));
    $this->assertEqual($matches[8]->getName(), 'LEV-VIL', sprintf('%s equals expected', $matches[8]->getName()));
    $this->assertEqual($matches[9]->getName(), 'MAL-ATH', sprintf('%s equals expected', $matches[9]->getName()));
  }


  function testAdminsResolveBettingSlips() {
    // Arrange
    $current_slip = $this->helper->createBettingSlipForDate(date('Y-m-d', strtotime('+1 day')));
    $results = array();
    foreach ($current_slip->getMatches() as $match) {
      $results["matches[{$match->getId()}]"] = '1';
    }
    $this->drupalLogin($this->admin);

    // Act
    $this->drupalPost('admin/quinieleitor/resolve', $results, 'Resolve');

    // Assert
    $saved_slip = quinieleitor_controller()->loadSlip($current_slip->getId());
    $this->assertTrue($saved_slip->isClosed());
    $this->assertEqual(MATCHES_PER_SLIP, count($saved_slip->getMatches()));
    foreach ($saved_slip->getMatches() as $match) {
      $this->assertEqual(1, $match->getResult());
    }
  }


  function testTheClassificationIsUpdatedWhenABettingSlipIsResolved() {
    $current_slip = $this->helper->createBettingSlipForDate(date('Y-m-d', strtotime('+1 day')));
    $this->helper->betterBetsForSlip($this->betters[0], $current_slip, array_fill(0, MATCHES_PER_SLIP, '2')); 
    $this->helper->betterBetsForSlip($this->betters[1], $current_slip, array_fill(0, MATCHES_PER_SLIP, '2')); 
    $results = array_fill(0, MATCHES_PER_SLIP, '2');
    quinieleitor_controller()->resolve($current_slip->getId(), $results);

    module_invoke_all('betting_slip_resolved', $current_slip);

    $hall_of_fame = quinieleitor_controller()->getHallOfFame(HALL_OF_FAME_MEMBERS);
    $this->assertEqual(2, count($hall_of_fame), sprintf('Expected %d members in hall of fame, got %d', 2, count($hall_of_fame)));
  }

}
