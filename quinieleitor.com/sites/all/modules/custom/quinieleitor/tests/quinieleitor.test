<?php

class QuinieleitorTest extends DrupalWebTestCase {

  private $users = array();

  function getInfo() {
    return array(
      'name' => 'Quinieleitor functional tests',
      'description' => '',
      'group' => 'Quinieleitor'
    );
  }


  function setUp() {
    parent::setUp('quinieleitor');
    $this->users['non_admin'] = $this->drupalCreateUser(array('access content'));
    $this->users['admin'] = $this->drupalCreateUser(array('access content', 'add betting slips'));
  }


  function testNonAdminsCannotCreateABettingSlip() {
    // Arrange
    $this->drupalLogin($this->users['non_admin']);

    // Act
    $this->drupalGet('admin/quinieleitor/add');

    // Assert
    $this->assertResponse(403, 'Non admins cannot create a betting slip.');
  }


  function testAdminsCanCreateABettingSlip() {
    // Arrange
    $this->drupalLogin($this->users['admin']);
    $betting_slip = array(
      'date' => '2014-08-24',
      'matches[0]' => 'SEV-VAL',
      'matches[1]' => 'ALM-ESP',
      'matches[2]' => 'CEL-GET',
      'matches[3]' => 'RMA-COR',
      'matches[4]' => 'EIB-RSO',
      'matches[5]' => 'RAY-ATM',
      'matches[6]' => 'GRA-DEP',
      'matches[7]' => 'FCB-ELC',
      'matches[8]' => 'LEV-VIL',
      'matches[9]' => 'MAL-ATH',
    );

    // Act
    $this->drupalPost('admin/quinieleitor/add', $betting_slip, 'Add');

    // Assert
    $slips = quinieleitor_get_betting_slips();
    $this->assertEqual(1, count($slips));
    $this->assertEqual($slips[0]->matches[0]->name, 'SEV-VAL', sprintf('%s equals expected', $slips[0]->matches[0]->name));
    $this->assertEqual($slips[0]->matches[1]->name, 'ALM-ESP', sprintf('%s equals expected', $slips[0]->matches[1]->name));
    $this->assertEqual($slips[0]->matches[2]->name, 'CEL-GET', sprintf('%s equals expected', $slips[0]->matches[2]->name));
    $this->assertEqual($slips[0]->matches[3]->name, 'RMA-COR', sprintf('%s equals expected', $slips[0]->matches[3]->name));
    $this->assertEqual($slips[0]->matches[4]->name, 'EIB-RSO', sprintf('%s equals expected', $slips[0]->matches[4]->name));
    $this->assertEqual($slips[0]->matches[5]->name, 'RAY-ATM', sprintf('%s equals expected', $slips[0]->matches[5]->name));
    $this->assertEqual($slips[0]->matches[6]->name, 'GRA-DEP', sprintf('%s equals expected', $slips[0]->matches[6]->name));
    $this->assertEqual($slips[0]->matches[7]->name, 'FCB-ELC', sprintf('%s equals expected', $slips[0]->matches[7]->name));
    $this->assertEqual($slips[0]->matches[8]->name, 'LEV-VIL', sprintf('%s equals expected', $slips[0]->matches[8]->name));
    $this->assertEqual($slips[0]->matches[9]->name, 'MAL-ATH', sprintf('%s equals expected', $slips[0]->matches[9]->name));
  }
}
