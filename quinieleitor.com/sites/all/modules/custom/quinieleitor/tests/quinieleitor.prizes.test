<?php

class QuinieleitorPrizesTest extends DrupalUnitTestCase {

  private $calculator;
  private $resultSlip;


  function getInfo() {
    return array(
      'name' => 'Quinieleitor prizes',
      'description' => 'Unit tests for the calculation of prizes',
      'group' => 'Quinieleitor'
    );
  }


  function setUp() {
    $prize_table = array(
      'prizes' => array(
        10 => 0.4,
        9 => 0.2,
        8 => 0.12,
        7 => 0.08,
      ),
      'slip_value' => 100,
    );
    $this->calculator = new PrizeCalculator($prize_table);
    $this->resultSlip = $this->createResultSlip(array(
      1 => '2',
      2 => '2',
      3 => '2',
      4 => '2',
      5 => '2',
      6 => '2',
      7 => '2',
      8 => '2',
      9 => '2',
      10 => '2',
    ));
  }


  function testParticipantHasNoPrice() {
    // Arrange
    $slips = array(
      $this->createBetterSlipWithMatches(0),
    );

    // Act
    $this->resultSlip->calculatePrizes($slips, $this->calculator);

    // Assert
    $this->assertEqual(0, $slips[0]->prize);
  }


  function testABetterWasRewarded() {
    // Arrange
    $expected_prize = 8;
    $slips = array(
      $this->createBetterSlipWithMatches(7),
    );

    // Act
    $this->resultSlip->calculatePrizes($slips, $this->calculator);

    // Assert
    $this->assertEqual($expected_prize, $slips[0]->prize, sprintf('%d matches %d', $slips[0]->prize, $expected_prize));
  }


  function testTwoBettersAndOnlyOneWasRewarded() {
    // Arrange
    $expected_first_prize = 16;
    $expected_second_prize = 0;
    $slips = array(
      $this->createBetterSlipWithMatches(7),
      $this->createBetterSlipWithMatches(0),
    );

    // Act
    $this->resultSlip->calculatePrizes($slips, $this->calculator);

    // Assert
    $this->assertEqual($expected_first_prize, $slips[0]->prize, sprintf('%d matches %d', $slips[0]->prize, $expected_first_prize));
    $this->assertEqual($expected_second_prize, $slips[1]->prize, sprintf('%d matches %d', $slips[1]->prize, $expected_second_prize));
  }


  function testTwoBettersWithDifferentNumberOfHitsEarnTheFullReward() {
    // Arrange
    $expected_first_prize = 16;
    $expected_second_prize = 80;
    $slips = array(
      $this->createBetterSlipWithMatches(7),
      $this->createBetterSlipWithMatches(10),
    );

    // Act
    $this->resultSlip->calculatePrizes($slips, $this->calculator);

    // Assert
    $this->assertEqual($expected_first_prize, $slips[0]->prize, sprintf('%d matches %d', $slips[0]->prize, $expected_first_prize));
    $this->assertEqual($expected_second_prize, $slips[1]->prize, sprintf('%d matches %d', $slips[1]->prize, $expected_second_prize));
  }


  function testTwoBettersWithTheSameNumberOfHitsShareTheReward() {
    // Arrange
    $expected_first_prize = 40;
    $expected_second_prize = 40;
    $slips = array(
      $this->createBetterSlipWithMatches(10),
      $this->createBetterSlipWithMatches(10),
    );

    // Act
    $this->resultSlip->calculatePrizes($slips, $this->calculator);

    // Assert
    $this->assertEqual($expected_first_prize, $slips[0]->prize, sprintf('%d matches %d', $slips[0]->prize, $expected_first_prize));
    $this->assertEqual($expected_second_prize, $slips[1]->prize, sprintf('%d matches %d', $slips[1]->prize, $expected_second_prize));
  }


  function testAllTheVeryUnluckyBettersShareTheMaxPrize() {
    // Arrange
    $expected_shared_prize = 40;
    $slips = array(
      $this->createBetterSlipWithMatches(10),
      $this->createBetterSlipWithMatches(10),
      $this->createBetterSlipWithMatches(10),
      $this->createBetterSlipWithMatches(10),
      $this->createBetterSlipWithMatches(10),
      $this->createBetterSlipWithMatches(10),
      $this->createBetterSlipWithMatches(10),
      $this->createBetterSlipWithMatches(10),
      $this->createBetterSlipWithMatches(10),
      $this->createBetterSlipWithMatches(10),
    );

    // Act
    $this->resultSlip->calculatePrizes($slips, $this->calculator);

    // Assert
    foreach ($slips as $slip) {
      $this->assertEqual($expected_shared_prize, $slip->prize, sprintf('%d matches %d', $slips[0]->prize, $expected_shared_prize));
    }
  }


  private function createBetterSlipWithMatches($num_matches) {
    $matches = array();
    $i = 1;
    while ($i <= $num_matches) {
      $matches[$i] = '2';
      $i++;
    }
    while ($i <= MATCHES_PER_SLIP) {
      $matches[$i] = '1';
      $i++;
    }

    return $this->createBetterSlip($matches);
  }


  private function createBetterSlip($matches) {
    $slip = new BetterSlip();
    foreach ($matches as $match_id => $prediction) {
      $bet = new Bet(null, $match_id, $prediction);
      $slip->add($bet);
    }

    return $slip;
  }


  private function createResultSlip($matches) {
    $slip = new ResultsSlip();
    foreach ($matches as $match_id => $result) {
      $match = new Match($match_id, "Match $match_id", $result);
      $slip->add($match);
    }

    return $slip;
  }

}
